"""
Base settings to build other settings from.
Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import dj_database_url
import environ

from django.utils.text import slugify
from pathlib import Path

from grumpy.core.utils import DynamicSetting

#########
# setup #
#########

env = environ.Env()

ROOT_DIR = Path(__file__).resolve(strict=True).parents[2]  # (server dir)
CONFIG_DIR = ROOT_DIR / "config"
APP_DIR = ROOT_DIR / "grumpy"

PROJECT_NAME = "Exmouth Grumpy Old Mens Book Club"
PROJECT_SLUG = slugify(PROJECT_NAME)
PROJECT_EMAIL = "{role}" + env("DJANGO_EMAIL_DOMAIN", default="gmail.com")

WSGI_APPLICATION = "config.wsgi.application"
ASGI_APPLICATION = "config.asgi.application"

ROOT_URLCONF = "config.urls"

SITE_ID = 1  # (default site)

APPEND_SLASH = True

DEBUG = False  # redefined in environment module
SECRET_KEY = "shhh"  # redefined in environment module

########
# apps #
########

DJANGO_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.sites",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.gis",
]

THIRD_PARTY_APPS = [
    "allauth",
    "allauth.account",
    "colorfield",
    "corsheaders",
    "drf_spectacular",
    "rest_framework",
]

LOCAL_APPS = [
    "grumpy.core",
    "grumpy.users",
    "grumpy.books",
    "grumpy.meetings",
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

#############
# databases #
#############

# DATABASE format is: "ENGINE://USER:PASSWORD@HOST:PORT/NAME"

DATABASES = {"default": dj_database_url.config(conn_max_age=0)}

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

DATA_UPLOAD_MAX_NUMBER_FIELDS = 10240

##############
# migrations #
##############

MIGRATION_MODULES = {
    # (overrides for app migrations go here)
}

############
# fixtures #
############

FIXTURE_DIRS = [
    # dirs to search in addtion to fixtures directroy of each app
    # (note that data migrations are preferred to fixtures)
]

########################
# static & sedia Files #
########################

# static & media settings are configured in environment module

###########
# locales #
###########

# TODO: REVIEW TIMEZONES

LANGUAGE_CODE = "en-gb"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = False

#########
# admin #
#########

ADMIN_URL = "admin/"

ADMIN_SITE_HEADER = f"{PROJECT_NAME} administrative console"
ADMIN_SITE_TITLE = f"{PROJECT_NAME} adminstrative console"
ADMIN_INDEX_TITLE = f"Welcome to the {PROJECT_NAME} adminsitration console"

ADMINS = [(PROJECT_NAME, PROJECT_EMAIL.format(role="grumpy"))]
MANAGERS = ADMINS

#############
# templates #
#############

# any templates placed in "grumpy/core/templates" can override app-specific templates

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            str(ROOT_DIR / "grumpy/core/templates"),
        ],
        # 'APP_DIRS': True,  # not needed since "app_directories.Loader" is specified below
        "OPTIONS": {
            "loaders": [
                "django.template.loaders.filesystem.Loader",  # first look at DIRS
                "django.template.loaders.app_directories.Loader",  # then look in each app
            ],
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                # TODO: ADD ADDITIONAL PROCESSORS ?
            ],
        },
    },
]


##############
# middleware #
##############

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    # "django.middleware.locale.LocaleMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth.account.middleware.AccountMiddleware",
]

###################
# authentication #
##################

# TODO

LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "/"

AUTH_USER_MODEL = "users.User"
AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
]

# allauth stuff...

ACCOUNT_ADAPTER = "grumpy.users.auth.AccountAdapter"
ACCOUNT_FORMS = {
    "add_email": "allauth.account.forms.AddEmailForm",
    "change_password": "allauth.account.forms.ChangePasswordForm",
    "confirm_login_code": "allauth.account.forms.ConfirmLoginCodeForm",
    "login": "allauth.account.forms.LoginForm",
    "request_login_code": "allauth.account.forms.RequestLoginCodeForm",
    "reset_password": "allauth.account.forms.ResetPasswordForm",
    "reset_password_from_key": "allauth.account.forms.ResetPasswordKeyForm",
    "set_password": "allauth.account.forms.SetPasswordForm",
    "signup": "allauth.account.forms.SignupForm",
    "user_token": "allauth.account.forms.UserTokenForm",
}
ACCOUNT_PREVENT_ENUMERATION = False
ACCOUNT_SESSION_REMEMBER = None
ACCOUNT_SIGNUP_FIELDS = ["email*", "password1*", "password2*"]
ACCOUNT_SIGNUP_FORM_HONEYPOT_FIELD = "username"
ACCOUNT_LOGIN_METHODS = {
    "email",
}
ACCOUNT_LOGIN_ON_EMAIL = False
ACCOUNT_LOGIN_ON_PASSWORD_RESET = False
ACCOUNT_EMAIL_VERIFICATION = "optional"  # "mandatory"
ACCOUNT_EMAIL_VERIFICATION_SUPPORTS_RESEND = True
ACCOUNT_EMAIL_SUBJECT_PREFIX = PROJECT_NAME
ACCOUNT_EMAIL_NOTIFICATIONS = True  # False
ACCOUNT_CHANGE_EMAIL = True  # (prevents having more than 1 email)
ACCOUNT_USER_DISPLAY = "grumpy.users.auth.get_user_display"
ACCOUNT_USER_MODEL_USERNAME_FIELD = None

##############
# passowords #
##############

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
    {
        "NAME": "grumpy.users.validators.LengthPasswordValidator",
    },
    {
        "NAME": "grumpy.users.validators.StrengthPasswordValidator",
    },
]

##################
# security, etc. #
##################


ALLOWED_HOSTS = ["*"]  # redefined in environment module

# TODO: CORS stuff


#########
# email #
#########

# further email settins (like backend) configured in environment module

EMAIL_TIMEOUT = 60

SERVER_EMAIL = PROJECT_EMAIL.format(role="grumpy-info")
DEFAULT_FROM_EMAIL = f"{PROJECT_NAME} <{PROJECT_EMAIL.format(role='grumpy-info')}>"

#######
# API #
#######

# TODO: SHOULD I USE DRF ?

###########
# logging #
###########

# set in environment module

#############
# profiling #
#############

# set in environment module

######################
# app-specific stuff #
######################

ALLOW_SIGNUP = DynamicSetting(
    "core.GrumpySettings.allow_signup",
    True,
)

ALLOW_SIGNIN = DynamicSetting(
    "core.GrumpySettings.allow_signin",
    True,
)

PASSWORD_MIN_LENGTH = DynamicSetting(
    "core.GrumpySettings.password_min_length",
    8,
)

PASSWORD_MAX_LENGTH = DynamicSetting(
    "core.GrumpySettings.password_max_length",
    255,
)

PASSWORD_STRENGTH = DynamicSetting(
    "core.GrumpySettings.password_strength",
    2,
)

MAX_FREE_BOOKS = DynamicSetting(
    "core.GrumpySettings.max_free_books",
    2,
)
